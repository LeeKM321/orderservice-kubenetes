---
# Source: umbrella-chart/charts/config-service/templates/service.yaml
apiVersion: v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Service # 리소스 타입
metadata:
  name: config-service # 생성하려는 서비스 이름.
spec: # 리소스 동작 방식 및 추가 설정
  selector: # 서비스가 트래픽을 전달할 대상 pod를 선택하는 기준
    app: config-service # label이 config-service를 가진 pod를 찾음.
  ports:
    - protocol: TCP
      port: 8888 # 외부에서 트래픽을 받을 포트
      targetPort: 8888 # selector로 선택된 pod로 트래픽 전달 시 사용할 포트.
  type: ClusterIP # 서비스의 접근 방식. 클러스터 내부에서만 접근할 수 있는 ip를 사용.
---
# Source: umbrella-chart/charts/gateway-service/templates/service.yaml
apiVersion: v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Service # 리소스 타입
metadata:
  name: gateway-service # 생성하려는 서비스 이름.
spec: # 리소스 동작 방식 및 추가 설정
  selector: # 서비스가 트래픽을 전달할 대상 pod를 선택하는 기준
    app: gateway-service # label이 config-service를 가진 pod를 찾음.
  ports:
    - protocol: TCP
      port: 8000 # 외부에서 트래픽을 받을 포트
      targetPort: 8000 # selector로 선택된 pod로 트래픽 전달 시 사용할 포트.
  type: ClusterIP # 서비스의 접근 방식. 클러스터 내부에서만 접근할 수 있는 ip를 사용.
---
# Source: umbrella-chart/charts/ordering-service/templates/service.yaml
apiVersion: v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Service # 리소스 타입
metadata:
  name: ordering-service # 생성하려는 서비스 이름.
spec: # 리소스 동작 방식 및 추가 설정
  selector: # 서비스가 트래픽을 전달할 대상 pod를 선택하는 기준
    app: ordering-service # label이 config-service를 가진 pod를 찾음.
  ports:
    - protocol: TCP
      port: 8082 # 외부에서 트래픽을 받을 포트
      targetPort: 8082 # selector로 선택된 pod로 트래픽 전달 시 사용할 포트.
  type: ClusterIP # 서비스의 접근 방식. 클러스터 내부에서만 접근할 수 있는 ip를 사용.
---
# Source: umbrella-chart/charts/product-service/templates/service.yaml
apiVersion: v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Service # 리소스 타입
metadata:
  name: product-service # 생성하려는 서비스 이름.
spec: # 리소스 동작 방식 및 추가 설정
  selector: # 서비스가 트래픽을 전달할 대상 pod를 선택하는 기준
    app: product-service # label이 config-service를 가진 pod를 찾음.
  ports:
    - protocol: TCP
      port: 8083 # 외부에서 트래픽을 받을 포트
      targetPort: 8083 # selector로 선택된 pod로 트래픽 전달 시 사용할 포트.
  type: ClusterIP # 서비스의 접근 방식. 클러스터 내부에서만 접근할 수 있는 ip를 사용.
---
# Source: umbrella-chart/charts/rabbitmq/templates/service.yaml
# values.yml에 있는 services들을 순회하면서 각 서비스에 대한 Service 리소스를 일괄 생성.

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  labels:
    app: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
      protocol: TCP
    - name: management
      port: 15672
      targetPort: 15672
      protocol: TCP
  type: ClusterIP
---
# Source: umbrella-chart/charts/user-service/templates/service.yaml
apiVersion: v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Service # 리소스 타입
metadata:
  name: user-service # 생성하려는 서비스 이름.
spec: # 리소스 동작 방식 및 추가 설정
  selector: # 서비스가 트래픽을 전달할 대상 pod를 선택하는 기준
    app: user-service # label이 config-service를 가진 pod를 찾음.
  ports:
    - protocol: TCP
      port: 8081 # 외부에서 트래픽을 받을 포트
      targetPort: 8081 # selector로 선택된 pod로 트래픽 전달 시 사용할 포트.
  type: ClusterIP # 서비스의 접근 방식. 클러스터 내부에서만 접근할 수 있는 ip를 사용.
---
# Source: umbrella-chart/charts/config-service/templates/deployment.yaml
apiVersion: apps/v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Deployment # 리소스 타입
metadata:
  name: config-service # 생성하려는 서비스 이름.
  labels:
    app: config-service # 다른 오브젝트에서 이 Deployment를 참조할 때 사용하는 라벨.
  annotations:
    # Helm에게 특정 동작을 지시하고 싶을 때 사용하는 데이터 명시
    "helm.sh/hook": pre-install, post-install # Helm이 이 deployment를 설치하는 타이밍을 지정.
    "helm.sh/hook-weight": "-5" # 상대값을 이용해서 다른 리소스보다 먼저/나중에 실행되도록 조정.


spec:
  replicas: 1
  selector:
    matchLabels:
      app: config-service # 이 Deployment가 관리할 pod를 선택하는 기준.
  template:
    metadata:
      labels:
        app: config-service # pod에 부여할 라벨
    spec:
      imagePullSecrets:
      containers:
        - name: config-service
          image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/config-service:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8888
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: default
            - name: GIT_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: git-private-key # 시크릿 오브젝트의 이름
                  key: GIT_PRIVATE_KEY # 시크릿이 가지고 있는 값
---
# Source: umbrella-chart/charts/gateway-service/templates/deployment.yaml
apiVersion: apps/v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Deployment # 리소스 타입
metadata:
  name: gateway-service # 생성하려는 서비스 이름.
  labels:
    app: gateway-service # 다른 오브젝트에서 이 Deployment를 참조할 때 사용하는 라벨.
  annotations:
    # Helm에게 특정 동작을 지시하고 싶을 때 사용하는 데이터 명시
    "helm.sh/hook": pre-install, post-install # Helm이 이 deployment를 설치하는 타이밍을 지정.
    "helm.sh/hook-weight": "5" # 상대값을 이용해서 다른 리소스보다 먼저/나중에 실행되도록 조정.


spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-service # 이 Deployment가 관리할 pod를 선택하는 기준.
  template:
    metadata:
      labels:
        app: gateway-service # pod에 부여할 라벨
    spec:
      imagePullSecrets:
      containers:
        - name: gateway-service
          image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/gateway-service:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: default
---
# Source: umbrella-chart/charts/ordering-service/templates/deployment.yaml
apiVersion: apps/v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Deployment # 리소스 타입
metadata:
  name: ordering-service # 생성하려는 서비스 이름.
  labels:
    app: ordering-service # 다른 오브젝트에서 이 Deployment를 참조할 때 사용하는 라벨.
  annotations:
    # Helm에게 특정 동작을 지시하고 싶을 때 사용하는 데이터 명시
    "helm.sh/hook": pre-install, post-install # Helm이 이 deployment를 설치하는 타이밍을 지정.
    "helm.sh/hook-weight": "0" # 상대값을 이용해서 다른 리소스보다 먼저/나중에 실행되도록 조정.


spec:
  replicas: 1
  selector:
    matchLabels:
      app: ordering-service # 이 Deployment가 관리할 pod를 선택하는 기준.
  template:
    metadata:
      labels:
        app: ordering-service # pod에 부여할 라벨
    spec:
      imagePullSecrets:
      containers:
        - name: ordering-service
          image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/ordering-service:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: default
---
# Source: umbrella-chart/charts/product-service/templates/deployment.yaml
apiVersion: apps/v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Deployment # 리소스 타입
metadata:
  name: product-service # 생성하려는 서비스 이름.
  labels:
    app: product-service # 다른 오브젝트에서 이 Deployment를 참조할 때 사용하는 라벨.
  annotations:
    # Helm에게 특정 동작을 지시하고 싶을 때 사용하는 데이터 명시
    "helm.sh/hook": pre-install, post-install # Helm이 이 deployment를 설치하는 타이밍을 지정.
    "helm.sh/hook-weight": "0" # 상대값을 이용해서 다른 리소스보다 먼저/나중에 실행되도록 조정.


spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service # 이 Deployment가 관리할 pod를 선택하는 기준.
  template:
    metadata:
      labels:
        app: product-service # pod에 부여할 라벨
    spec:
      imagePullSecrets:
      containers:
        - name: product-service
          image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/product-service:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8083
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: default
---
# Source: umbrella-chart/charts/rabbitmq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
  annotations:
    # Helm에게 특정 동작을 지시하고 싶을 때 사용하는 데이터 명시
    "helm.sh/hook": pre-install, post-install # Helm이 이 deployment를 설치하는 타이밍을 지정.
    "helm.sh/hook-weight": "-10" # 상대값을 이용해서 다른 리소스보다 먼저/나중에 실행되도록 조정.

spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_PASS
              value: "guest"
            - name: RABBITMQ_DEFAULT_USER
              value: "guest"
---
# Source: umbrella-chart/charts/user-service/templates/deployment.yaml
apiVersion: apps/v1 # 오브젝트 정의에 사용할 k8s API 버전. v1이 가장 안정화 된 버전.
kind: Deployment # 리소스 타입
metadata:
  name: user-service # 생성하려는 서비스 이름.
  labels:
    app: user-service # 다른 오브젝트에서 이 Deployment를 참조할 때 사용하는 라벨.
  annotations:
    # Helm에게 특정 동작을 지시하고 싶을 때 사용하는 데이터 명시
    "helm.sh/hook": pre-install, post-install # Helm이 이 deployment를 설치하는 타이밍을 지정.
    "helm.sh/hook-weight": "0" # 상대값을 이용해서 다른 리소스보다 먼저/나중에 실행되도록 조정.


spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-service # 이 Deployment가 관리할 pod를 선택하는 기준.
  template:
    metadata:
      labels:
        app: user-service # pod에 부여할 라벨
    spec:
      imagePullSecrets:
      containers:
        - name: user-service
          image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:1.1
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: default
